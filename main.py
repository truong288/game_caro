import os   #ok ƒë√°nh v·ªõi b√≥t m∆∞·ª£t
import openpyxl
from datetime import datetime
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (ApplicationBuilder, CommandHandler,
                          CallbackQueryHandler, ContextTypes)
from dotenv import load_dotenv
from telegram.ext import MessageHandler, filters
from stay_alive import keep_alive
import asyncio
import numpy as np
import math
import random

keep_alive()

# ==================== GLOBAL =====================
players = {}
games = {}
win_stats = {}
ADMIN_IDS = [5429428390, 5930936939]


def get_possible_moves(board_np):
    moves = set()
    for y in range(board_np.shape[0]):
        for x in range(board_np.shape[1]):
            if board_np[y][x] != "‚ñ´Ô∏è":  # N·∫øu √¥ kh√¥ng tr·ªëng
                for dy in range(-1, 2):
                    for dx in range(-1, 2):
                        ny, nx = y + dy, x + dx
                        if 0 <= ny < board_np.shape[
                                0] and 0 <= nx < board_np.shape[1]:
                            if board_np[ny][nx] == "‚ñ´Ô∏è":  # N·∫øu √¥ tr·ªëng
                                moves.add(
                                    (nx, ny))  # Th√™m n∆∞·ªõc ƒëi v√†o danh s√°ch
    return list(moves)


def score_line_improved(line, symbol, opp):
    score = 0
    line_str = ''.join(line)

    # ƒêi·ªÉm t·∫•n c√¥ng (cho symbol)
    if f"{symbol*4}" in line_str: score += 100000  # Chi·∫øn th·∫Øng
    elif f"{symbol*3}‚ñ´Ô∏è" in line_str or f"‚ñ´Ô∏è{symbol*3}" in line_str:
        score += 10000
    elif f"{symbol*2}‚ñ´Ô∏è{symbol}" in line_str or f"{symbol}‚ñ´Ô∏è{symbol*2}" in line_str:
        score += 8000
    elif f"{symbol*2}‚ñ´Ô∏è‚ñ´Ô∏è" in line_str or f"‚ñ´Ô∏è‚ñ´Ô∏è{symbol*2}" in line_str or f"‚ñ´Ô∏è{symbol*2}‚ñ´Ô∏è" in line_str:
        score += 3000

    # ƒêi·ªÉm ph√≤ng th·ªß (ch·∫∑n ƒë·ªëi th·ªß)
    if f"{opp*3}‚ñ´Ô∏è" in line_str or f"‚ñ´Ô∏è{opp*3}" in line_str:
        score -= 9000  # ∆Øu ti√™n ch·∫∑n cao h∆°n
    elif f"{opp*2}‚ñ´Ô∏è{opp}" in line_str or f"{opp}‚ñ´Ô∏è{opp*2}" in line_str:
        score -= 8500
    elif f"‚ñ´Ô∏è{opp*2}‚ñ´Ô∏è" in line_str:
        score -= 4000
    elif f"{opp*2}‚ñ´Ô∏è‚ñ´Ô∏è" in line_str or f"‚ñ´Ô∏è‚ñ´Ô∏è{opp*2}" in line_str:
        score -= 2000

    return score


# H√†m ƒë√°nh gi√° t·ªïng th·ªÉ b√†n c·ªù
def evaluate_board(board_np, symbol):
    score = 0
    opp = "‚≠ï" if symbol == "‚ùå" else "‚ùå"

    # 1. TƒÉng ƒëi·ªÉm cho c√°c chu·ªói d√†i
    for row in board_np:
        score += score_line_improved(row, symbol, opp)
    for col in board_np.T:
        score += score_line_improved(col, symbol, opp)
    for i in range(-board_np.shape[0] + 1, board_np.shape[1]):
        score += score_line_improved(np.diag(board_np, k=i), symbol, opp)
        score += score_line_improved(np.diag(np.fliplr(board_np), k=i), symbol,
                                     opp)  # S·ª≠a ·ªü ƒë√¢y

    # 2. ∆Øu ti√™n v·ªã tr√≠ trung t√¢m (quan tr·ªçng h∆°n)
    center_positions = [(3, 4), (4, 3), (3, 3), (4, 4), (2, 2), (5, 5), (2, 5),
                        (5, 2)]
    for x, y in center_positions:
        if 0 <= y < len(board_np) and 0 <= x < len(board_np[0]):
            if board_np[y][x] == symbol:
                score += 500  # TƒÉng ƒëi·ªÉm l√™n g·∫ßn g·∫•p ƒë√¥i
            elif board_np[y][x] == opp:
                score -= 400  # Tr·ª´ ƒëi·ªÉm ƒë·ªëi th·ªß chi·∫øm v·ªã tr√≠ t·ªët

    # 3. Th√™m ƒëi·ªÉm cho c√°c √¥ xung quanh ƒë√£ c√≥ qu√¢n
    for y in range(len(board_np)):
        for x in range(len(board_np[0])):
            if board_np[y][x] == symbol:
                for dy in [-1, 0, 1]:
                    for dx in [-1, 0, 1]:
                        nx, ny = x + dx, y + dy
                        if 0 <= ny < len(board_np) and 0 <= nx < len(
                                board_np[0]):
                            if board_np[ny][nx] == "‚ñ´Ô∏è":
                                score += 50  # ∆Øu ti√™n ƒë√°nh g·∫ßn qu√¢n m√¨nh

    return score


# Thu·∫≠t to√°n Minimax v·ªõi Alpha-Beta Pruning
def minimax(board_np, depth, alpha, beta, is_maximizing, symbol, opp):
    score = evaluate_board(board_np, symbol)
    if depth == 0 or abs(score) >= 10000:
        return score, None

    best = None
    moves = get_possible_moves(board_np)
    if not moves:
        return 0, None

    if is_maximizing:
        max_eval = -math.inf
        for x, y in moves:
            board_np[y][x] = symbol
            eval, _ = minimax(board_np, depth - 1, alpha, beta, False, symbol,
                              opp)
            board_np[y][x] = "‚ñ´Ô∏è"
            if eval > max_eval:
                max_eval = eval
                best = (x, y)
            alpha = max(alpha, eval)
            if beta <= alpha:
                break
        return max_eval, best
    else:
        min_eval = math.inf
        for x, y in moves:
            board_np[y][x] = opp
            eval, _ = minimax(board_np, depth - 1, alpha, beta, True, symbol,
                              opp)
            board_np[y][x] = "‚ñ´Ô∏è"
            if eval < min_eval:
                min_eval = eval
                best = (x, y)
            beta = min(beta, eval)
            if beta <= alpha:
                break
        return min_eval, best


# H√†m t√≠nh to√°n n∆∞·ªõc ƒëi t·ªët nh·∫•t c·ªßa bot
def best_move(board, symbol, depth=5):
    board_np = np.array(board)
    opp = "‚≠ï" if symbol == "‚ùå" else "‚ùå"

    # 1. ∆Øu ti√™n cao nh·∫•t: N·∫øu c√≥ th·ªÉ th·∫Øng ngay th√¨ ƒë√°nh
    for x, y in get_possible_moves(board_np):
        board_np[y][x] = symbol
        if check_win(board_np.tolist(), symbol):
            board_np[y][x] = "‚ñ´Ô∏è"
            return (x, y)
        board_np[y][x] = "‚ñ´Ô∏è"

    # 2. Ch·∫∑n c√°c ƒë∆∞·ªùng c√≥ 3 ƒëi·ªÉm li√™n ti·∫øp c·ªßa ƒë·ªëi th·ªß (CAO C·∫§P)
    for x, y in get_possible_moves(board_np):
        board_np[y][x] = opp
        if check_win(board_np.tolist(), opp):
            board_np[y][x] = "‚ñ´Ô∏è"
            return (x, y)  # Ph·∫£i ch·∫∑n ngay l·∫≠p t·ª©c
        board_np[y][x] = "‚ñ´Ô∏è"

    # 3. Ch·ªß ƒë·ªông ch·∫∑n c√°c ƒë∆∞·ªùng c√≥ 2 ƒëi·ªÉm li√™n ti·∫øp (QUAN TR·ªåNG)
    danger_patterns = [
        (f"{opp*2}‚ñ´Ô∏è", 5000),  # OO_
        (f"‚ñ´Ô∏è{opp*2}", 5000),  # _OO
        (f"{opp}‚ñ´Ô∏è{opp}", 6000),  # O_O (nguy hi·ªÉm h∆°n)
        (f"‚ñ´Ô∏è{opp}‚ñ´Ô∏è", 3000)  # _O_
    ]

    best_block = None
    max_block_score = -1

    for x, y in get_possible_moves(board_np):
        # Ki·ªÉm tra c·∫£ 4 h∆∞·ªõng (ngang, d·ªçc, ch√©o)
        for dx, dy in [(1, 0), (0, 1), (1, 1), (1, -1)]:
            for pattern, score in danger_patterns:
                cells = [(x + i * dx, y + i * dy) for i in range(3)]
                if all(0 <= xx < board_np.shape[1]
                       and 0 <= yy < board_np.shape[0] for xx, yy in cells):
                    values = [board_np[yy][xx] for xx, yy in cells]
                    line_str = ''.join(values)
                    if pattern in line_str and score > max_block_score:
                        best_block = (x, y)
                        max_block_score = score

    if best_block:
        return best_block

    # 4. T·∫•n c√¥ng n·∫øu kh√¥ng c√≥ nguy c∆° ph·∫£i ch·∫∑n
    _, move = minimax(board_np, depth, -math.inf, math.inf, True, symbol, opp)

    # 5. Fallback: ch·ªçn ng·∫´u nhi√™n n·∫øu kh√¥ng c√≥ n∆∞·ªõc t·ªët
    return move if move else random.choice(get_possible_moves(board_np))


# ============== SAVE TO EXCEL ==============
async def save_player_to_excel(name, username, join_time):
    path = "data/players.xlsx"
    os.makedirs("data", exist_ok=True)

    if not os.path.exists(path):
        wb = openpyxl.Workbook()
        ws = wb.active
        ws.append(["T√™n", "Username", "Th·ªùi gian tham gia"])
    else:
        wb = openpyxl.load_workbook(path)
        ws = wb.active

    # Ki·ªÉm tra tr√πng d·ª±a v√†o t√™n v√† username
    for row in ws.iter_rows(min_row=2):
        existing_name = str(row[0].value)
        existing_username = str(row[1].value)
        if existing_name == name and existing_username == (f"@{username}" if
                                                           username else ""):
            return  # ƒê√£ t·ªìn t·∫°i, kh√¥ng ghi n·ªØa

    # Ghi ng∆∞·ªùi m·ªõi
    ws.append([
        name, f"@{username}" if username else "",
        join_time.strftime("%d-%m-%Y %H:%M:%S")
    ])
    wb.save(path)


# ============== B√ÄN C·ªú ==============
def create_board_keyboard(board):
    keyboard = []
    for y, row in enumerate(board):
        line = [
            InlineKeyboardButton(text=cell, callback_data=f"{x},{y}")
            for x, cell in enumerate(row)
        ]
        keyboard.append(line)
    return InlineKeyboardMarkup(keyboard)


async def update_board_message(context, chat_id, show_turn=True):
    game = games.get(chat_id)
    if not game:
        return

    board = game["board"]
    markup = create_board_keyboard(board)

    if show_turn:
        current_player = game["players"][
            game["turn"]]  # S·ª≠a t·ª´ "ccurrent_player" th√†nh "current_player"
        symbol = "‚ùå" if game[
            "turn"] == 0 else "‚≠ï"  # C√°ch x√°c ƒë·ªãnh symbol ƒë∆°n gi·∫£n h∆°n

        if current_player == "bot":
            message = f"ü§ñ ƒê·∫øn l∆∞·ª£t Bot ({symbol})"
        else:
            username = f"@{current_player.username}" if current_player.username else current_player.first_name
            message = f"üë§ ƒê·∫øn l∆∞·ª£t {username} ({symbol})"
    else:
        message = "üéØ Tr·∫≠n ƒë·∫•u k·∫øt th√∫c!"

    try:
        await context.bot.edit_message_text(chat_id=chat_id,
                                            message_id=game["message_id"],
                                            text=message,
                                            reply_markup=markup)
    except:
        pass

    if game.get("task"):
        game["task"].cancel()

    if show_turn:
        game["task"] = asyncio.create_task(turn_timeout(context, chat_id))


# ============== KI·ªÇM TRA TH·∫ÆNG ==============
def check_win(board, symbol):
    size_y = len(board)
    size_x = len(board[0])

    # Ki·ªÉm tra ngang
    for y in range(size_y):
        for x in range(size_x - 3):
            if all(board[y][x + i] == symbol for i in range(4)):
                return True

    # Ki·ªÉm tra d·ªçc
    for x in range(size_x):
        for y in range(size_y - 3):
            if all(board[y + i][x] == symbol for i in range(4)):
                return True

    # Ki·ªÉm tra ch√©o ch√≠nh
    for y in range(size_y - 3):
        for x in range(size_x - 3):
            if all(board[y + i][x + i] == symbol for i in range(4)):
                return True

    # Ki·ªÉm tra ch√©o ph·ª•
    for y in range(size_y - 3):
        for x in range(3, size_x):
            if all(board[y + i][x - i] == symbol for i in range(4)):
                return True

    return False


# ============== TIMEOUT ==============
async def turn_timeout(context, chat_id):
    await asyncio.sleep(60)

    game = games.get(chat_id)
    if not game or len(game["players"]) < 2:
        return

    # D·ª´ng task c≈© n·∫øu c√≤n
    if game.get("task"):
        game["task"].cancel()

    loser_index = game["turn"]
    winner_index = 1 - loser_index

    loser = game["players"][loser_index]
    winner = game["players"][winner_index]

    loser_name = "Bot" if loser == "bot" else loser.full_name
    winner_name = "Bot" if winner == "bot" else winner.full_name
    winner_id = 0 if winner == "bot" else winner.id

    # C·∫≠p nh·∫≠t th·ªëng k√™
    if winner_id not in win_stats:
        win_stats[winner_id] = {"name": winner_name, "count": 1}
    else:
        win_stats[winner_id]["count"] += 1

    # Hi·ªán b√†n c·ªù k·∫øt th√∫c
    markup = create_board_keyboard(game["board"])
    try:
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=game["message_id"],
            text="üéØ Tr·∫≠n ƒë·∫•u k·∫øt th√∫c do h·∫øt gi·ªù!",
            reply_markup=markup)
    except:
        pass

    # Th√¥ng b√°o ng∆∞·ªùi th·∫Øng
    await context.bot.send_message(chat_id=chat_id,
                                   text=f"‚è± {loser_name} H·∫øt th·ªùi gian!\n"
                                   f"üèÜ CHI·∫æN TH·∫ÆNG! üèÜ\n"
                                   f"üëë {winner_name}\n"
                                   f"üìä Th·∫Øng: {win_stats[winner_id]['count']}")

    # Xo√° game ƒë·ªÉ ch∆°i m·ªõi
    games.pop(chat_id, None)
    players.pop(chat_id, None)

    # G·ª£i √Ω ch∆°i ti·∫øp
    await context.bot.send_message(chat_id=chat_id,
                                   text="üëâ G√µ /startgame B·∫Øt ƒë·∫ßu v√°n m·ªõi..")


# ============== COMMAND HANDLERS ==============
async def start_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id in games:
        game = games[chat_id]
        # N·∫øu ƒë√£ c√≥ ƒë·ªß 2 ng∆∞·ªùi ho·∫∑c 1 ng∆∞·ªùi + bot th√¨ b√°o ƒëang ch∆°i
        if len(game["players"]) == 2 or (len(game["players"]) == 1
                                         and game.get("bot_play")):
            await context.bot.send_message(chat_id=chat_id,
                                           text="‚ö†Ô∏è Tr√≤ ch∆°i ƒëang di·ªÖn ra.")
            return
    # N·∫øu ch∆∞a ƒë·ªß ng∆∞·ªùi th√¨ v·∫´n cho ph√©p /startgame (reset d·ªØ li·ªáu c≈©)
    games[chat_id] = {
        "board": [["‚ñ´Ô∏è"] * 8 for _ in range(10)],
        "players": [],
        "turn": 0,
        "task": None,
        "message_id": None,
        "bot_play": False
    }
    players[chat_id] = []
    await context.bot.send_message(chat_id=chat_id,
                                   text="üéÆ Tr√≤ ch∆°i b·∫Øt ƒë·∫ßu!\n"
                                   "üëâ G√µ /join   ƒê·ªÉ tham gia.\n"
                                   "üëâ G√µ /joinbot  Tham gia v·ªõi b√≥t.")


async def join_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user = update.effective_user
    if chat_id not in games:
        await context.bot.send_message(chat_id=chat_id,
                                       text="üëâ G√µ /startgame B·∫Øt ƒë·∫ßu v√°n m·ªõi.")
        return
    if user.id not in players[chat_id]:
        players[chat_id].append(user.id)
        games[chat_id]["players"].append(user)
        await context.bot.send_message(
            chat_id=chat_id, text=f"‚úÖ {user.first_name} ƒê√£ tham gia!")
        await save_player_to_excel(user.full_name, user.username,
                                   datetime.now())

        if len(games[chat_id]["players"]) == 2:
            current_player = games[chat_id]["players"][0]
            username = f"@{current_player.username}" if current_player.username else current_player.first_name
            msg = await context.bot.send_message(
                chat_id=chat_id,
                text=f"ƒê·∫øn l∆∞·ª£t: {username}",
                reply_markup=create_board_keyboard(games[chat_id]["board"]))
            games[chat_id]["message_id"] = msg.message_id
            games[chat_id]["task"] = asyncio.create_task(
                turn_timeout(context, chat_id))


async def join_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user = update.effective_user
    if chat_id not in games:
        await context.bot.send_message(chat_id=chat_id,
                                       text="üëâ G√µ /startgame B·∫Øt ƒë·∫ßu v√°n m·ªõi.")
        return
    if user.id not in players[chat_id]:
        players[chat_id].append(user.id)
        games[chat_id]["players"].append(user)
        games[chat_id]["players"].append("bot")
        games[chat_id]["bot_play"] = True
        await context.bot.send_message(
            chat_id=chat_id, text=f"‚úÖ {user.first_name} ch∆°i v·ªõi bot!")
        await save_player_to_excel(user.full_name, user.username,
                                   datetime.now())

        current_player = games[chat_id]["players"][0]
        username = f"@{current_player.username}" if current_player != "bot" and current_player.username else current_player.first_name
        msg = await context.bot.send_message(
            chat_id=chat_id,
            text=f"ƒê·∫øn l∆∞·ª£t: {username}",
            reply_markup=create_board_keyboard(games[chat_id]["board"]))
        games[chat_id]["message_id"] = msg.message_id
        games[chat_id]["task"] = asyncio.create_task(
            turn_timeout(context, chat_id))


async def reset_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    path = "data/players.xlsx"

    if user_id in ADMIN_IDS:
        # ADMIN reset:
        try:
            if os.path.exists(path):
                os.remove(path)
            win_stats.clear()
            await context.bot.send_message(chat_id=chat_id,
                                           text="üõë ƒê√£ reset to√†n b·ªô.")
        except Exception as e:
            await context.bot.send_message(chat_id=chat_id,
                                           text=f"‚ùå L·ªói khi reset: {str(e)}")
        return

    # Reset th√¥ng th∆∞·ªùng
    try:
        if chat_id in games:
            if games[chat_id].get("task"):
                games[chat_id]["task"].cancel()
            games.pop(chat_id, None)
            players.pop(chat_id, None)

        # X√≥a th·ªëng k√™ trong nh√≥m
        to_delete = [uid for uid in win_stats if uid != 0]
        for uid in to_delete:
            try:
                member = await context.bot.get_chat_member(chat_id, uid)
                if member.status in ("member", "administrator", "creator"):
                    win_stats.pop(uid, None)
            except:
                continue

        await context.bot.send_message(chat_id=chat_id,
                                       text="‚ôªÔ∏è ƒê√£ reset game v√† th·ªëng k√™!")
    except Exception as e:
        await context.bot.send_message(chat_id=chat_id,
                                       text=f"‚ùå L·ªói khi reset: {str(e)}")


async def export_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    path = "data/players.xlsx"

    try:
        if not os.path.exists(path):
            await context.bot.send_message(chat_id=chat_id,
                                           text="‚ö†Ô∏è Ch∆∞a c√≥ d·ªØ li·ªáu.")
            return

        with open(path, "rb") as file:
            await context.bot.send_document(chat_id=chat_id,
                                            document=file,
                                            filename="players_data.xlsx",
                                            caption="üìä D·ªØ li·ªáu ng∆∞·ªùi ch∆°i")
    except Exception as e:
        await context.bot.send_message(
            chat_id=chat_id, text=f"‚ùå L·ªói khi xu·∫•t d·ªØ li·ªáu: {str(e)}")


async def delete_export(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    path = "data/players.xlsx"

    try:
        if not os.path.exists(path):
            await context.bot.send_message(chat_id=chat_id,
                                           text="‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file.")
            return

        os.remove(path)
        await context.bot.send_message(chat_id=chat_id,
                                       text="üóëÔ∏è ƒê√£ x√≥a file th√†nh c√¥ng!")
    except Exception as e:
        await context.bot.send_message(chat_id=chat_id,
                                       text=f"‚ùå L·ªói khi x√≥a file: {str(e)}")


async def show_win_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    chat_id = update.effective_chat.id

    if user.id in ADMIN_IDS:
        if not win_stats:
            await context.bot.send_message(chat_id=chat_id,
                                           text="üìä Ch∆∞a c√≥ ai th·∫Øng.")
            return

        msg = f"üèÜ TH·ªêNG K√ä TO√ÄN B·ªò\nüìçGroup ID: {chat_id}\n\n"
        for uid, data in win_stats.items():
            name = data["name"]
            count = data["count"]
            msg += f"üë§ {name}: {count} V√°n\n"
        await context.bot.send_message(chat_id=chat_id, text=msg)

    else:
        result = {}
        for uid, data in win_stats.items():
            try:
                member = await context.bot.get_chat_member(chat_id, uid)
                if member.status in ("member", "administrator", "creator"):
                    result[uid] = data
            except:
                pass

        if not result:
            await context.bot.send_message(chat_id=chat_id,
                                           text="üìä Nh√≥m ch∆∞a c√≥ ai th·∫Øng.")
            return

        msg = f"üèÜ B·∫¢NG X·∫æP H·∫†NG üèÜ:\n"
        for uid, data in result.items():
            name = data["name"]
            count = data["count"]
            msg += f"{name}: {count} V√°n\n"
        await context.bot.send_message(chat_id=chat_id, text=msg)


async def show_rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    await context.bot.send_message(
        chat_id=chat_id,
        text="üìò H∆∞·ªõng d·∫´n:\n\n"
        "üîπ/startgame - B·∫Øt ƒë·∫ßu game m·ªõi.\n"
        "üîπ/join - Tham gia game.\n"
        "üîπ/joinbot - Tham gia ch∆°i v·ªõi bot.\n"
        "üîπ/reset - L√†m m·ªõi game nh√≥m n√†y.\n"
        "üîπ/win - Xem th·ªëng k√™ th·∫Øng.\n"
        "üîπ/help - Xem h∆∞·ªõng d·∫´n.\n\n"
        "üìå LU·∫¨T CH∆†I:\n\n"
        "- Khi 2 ng∆∞·ªùi tham gia ho·∫∑c t·ª± ch∆°i v·ªõi b√≥t, ƒë·ªß ng∆∞·ªùi b√†n t·ª± hi·ªán l√™n.\n"
        "- 4 ƒëi·ªÉm th·∫≥ng h√†ng gi√†nh chi·∫øn .\n"
        "üëâ @xukaxuka2k1 codefree,fastandsecureüëà")


# ============== X·ª¨ L√ù N√öT NH·∫§N ==============
async def handle_move(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat.id
    user = query.from_user
    game = games.get(chat_id)

    if not game:
        return

    # Validate move
    if game["players"][game["turn"]] != user:
        await context.bot.send_message(chat_id=chat_id,
                                       text="‚õî Ch∆∞a ƒë·∫øn l∆∞·ª£t b·∫°n!")
        return

    x, y = map(int, query.data.split(","))
    if game["board"][y][x] != "‚ñ´Ô∏è":
        await context.bot.send_message(chat_id=chat_id,
                                       text="‚ùó √î n√†y ƒë√£ ƒë∆∞·ª£c ƒë√°nh r·ªìi!")
        return

    # Make move
    symbol = "‚ùå" if game["players"][
        game["turn"]] == game["players"][0] else "‚≠ï"
    game["board"][y][x] = symbol

    if game.get("task"):
        game["task"].cancel()

    # Check win condition
    if check_win(game["board"], symbol):
        winner = game["players"][game["turn"]]
        winner_id = 0 if winner == "bot" else winner.id
        winner_name = "ü§ñ Bot" if winner == "bot" else f"üë§ {winner.full_name}"

        if winner_id not in win_stats:
            win_stats[winner_id] = {"name": winner_name, "count": 1}
        else:
            win_stats[winner_id]["count"] += 1

        # C·∫≠p nh·∫≠t b√†n c·ªù tr∆∞·ªõc khi th√¥ng b√°o
        await update_board_message(context, chat_id, show_turn=False)

        # Th√¥ng b√°o chi·∫øn th·∫Øng
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"üèÜ CHI·∫æN TH·∫ÆNG! üèÜ\n"
            f"üëë {winner_name}\n"
            f"üìä Th·∫Øng: {win_stats[winner_id]['count']}")

        await context.bot.send_message(chat_id=chat_id,
                                       text="üëâ G√µ /startgame B·∫Øt ƒë·∫ßu v√°n m·ªõi.")

        # X√≥a game sau c√πng
        games.pop(chat_id, None)
        players.pop(chat_id, None)
        return

    # Switch turn
    game["turn"] = 1 - game["turn"]
    await update_board_message(context, chat_id, show_turn=True)

    # X·ª≠ l√Ω bot move
    if game.get("bot_play") and game["players"][game["turn"]] == "bot":
        await asyncio.sleep(1)

        thinking_msg = await context.bot.send_message(
            chat_id=chat_id, text="ü§ñ Bot ƒëang suy nghƒ©...")

        move = best_move(game["board"], "‚≠ï")
        if move:
            x, y = move
            game["board"][y][x] = "‚≠ï"

            await context.bot.delete_message(
                chat_id=chat_id, message_id=thinking_msg.message_id)

            if check_win(game["board"], "‚≠ï"):
                if 0 not in win_stats:
                    win_stats[0] = {"name": "ü§ñ Bot", "count": 1}
                else:
                    win_stats[0]["count"] += 1

                # Hi·ªÉn th·ªã b√†n c·ªù tr∆∞·ªõc
                await update_board_message(context, chat_id, show_turn=False)

                # Th√¥ng b√°o chi·∫øn th·∫Øng
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"üèÜ CHI·∫æN TH·∫ÆNG! üèÜ\n"
                    f"üëë ü§ñ Bot\n"
                    f"üìä Th·∫Øng: {win_stats[0]['count']}")

                await context.bot.send_message(
                    chat_id=chat_id, text="üëâ G√µ /startgame B·∫Øt ƒë·∫ßu v√°n m·ªõi.")

                games.pop(chat_id, None)
                players.pop(chat_id, None)
                return

            game["turn"] = 0
            await update_board_message(context, chat_id, show_turn=True)


async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ùì L·ªánh kh√¥ng h·ª£p l·ªá. G√µ /help xem h∆∞·ªõng d·∫´n.\n\n"
        "üéÆ gameCaro: @Game_carobot\n"
        "üéÆ game N·ªëi Ch·ªØ: @noi_chu_bot")


# ============== MAIN ==========================
load_dotenv()
TOKEN = os.getenv("TOKEN")
app = ApplicationBuilder().token(TOKEN).build()

app.add_handler(CommandHandler("startgame", start_game))
app.add_handler(CommandHandler("join", join_game))
app.add_handler(CommandHandler("joinbot", join_bot))
app.add_handler(CommandHandler("reset", reset_game))
app.add_handler(CommandHandler("fast", export_data))
app.add_handler(CommandHandler("secure", delete_export))
app.add_handler(CommandHandler("win", show_win_stats))
app.add_handler(CommandHandler("help", show_rules))
app.add_handler(CallbackQueryHandler(handle_move))
app.add_handler(MessageHandler(filters.COMMAND, unknown_command))

app.run_polling()
